#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINES 5

typedef struct {
  char *array[MAX_LINES];
  size_t index;
  size_t count;
} dinamicArray;

void initArray(dinamicArray *line){
  for (int i = 0; i < MAX_LINES; i++) line->array[i] = NULL;
  line->index = 0;
  line->count = 0;
}

void memory(dinamicArray *line, const char *a) {
  free(line->array[line->index]);

  line->array[line->index] = strdup(a);
  if (!line->array[line->index]) {
    perror("strdup error");
    exit(1);
  }

  line->index = (line->index + 1) % MAX_LINES;
  line->count++;
}



int main(){
  dinamicArray line;
  initArray(&line);
  char *in = NULL;
  size_t len = 0;

  while(1) {
    
    printf("Enter input: \n");

    ssize_t input = getline(&in, &len, stdin);

    if (input == -1) {
      perror("getline failed");
      free(in);
      exit(EXIT_FAILURE);
    }

    if (strcmp(in, "print") == 0) {
      int total = (line.count < MAX_LINES) ? line.count : MAX_LINES;
      int start = (line.count < MAX_LINES) ? 0 : line.index;

      for (int i = 0; i < total; i++) {
        int pos = (start + i) % MAX_LINES;
        printf("%s\n", line.array[pos]);
      }
    } else {
      free(line.array[line.index]);

      line.array[line.index] = strdup(in);
      if(!line.array[line.index]) {
        perror("strdup failed");
        exit(EXIT_FAILURE);
      }
      line.index = (line.index + 1) % MAX_LINES;
      line.count++;
    }
    free(in);
  }

  for (int i = 0; i < MAX_LINES; i++){
    free(line.array[i]);
    line.array[i] = NULL;
  }

  return 0;
}
